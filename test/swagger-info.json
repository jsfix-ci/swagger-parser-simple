{
    "version": "2.0",
    "host": "petstore.swagger.io",
    "basePath": "/v2",
    "schemes": [
        "https",
        "http"
    ],
    "paths": [
        {
            "url": "/pet",
            "method": "post",
            "summary": "Add a new pet to the store",
            "description": "",
            "consumes": [
                "application/json",
                "application/xml"
            ],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "body",
                    "in": "body",
                    "description": "Pet object that needs to be added to the store",
                    "required": true
                }
            ],
            "responses": {
                "405": {
                    "description": "Invalid input",
                    "data": {}
                }
            }
        },
        {
            "url": "/pet",
            "method": "put",
            "summary": "Update an existing pet",
            "description": "",
            "consumes": [
                "application/json",
                "application/xml"
            ],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "body",
                    "in": "body",
                    "description": "Pet object that needs to be added to the store",
                    "required": true
                }
            ],
            "responses": {
                "400": {
                    "description": "Invalid ID supplied",
                    "data": {}
                },
                "404": {
                    "description": "Pet not found",
                    "data": {}
                },
                "405": {
                    "description": "Validation exception",
                    "data": {}
                }
            }
        },
        {
            "url": "/pet/findByStatus",
            "method": "get",
            "summary": "Finds Pets by status",
            "description": "Multiple status values can be provided with comma separated strings",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "status",
                    "in": "query",
                    "description": "Status values that need to be considered for filter",
                    "required": true,
                    "type": "array"
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "data": [
                        {
                            "id": 1,
                            "category": {
                                "id": 1,
                                "name": ""
                            },
                            "name": "",
                            "photoUrls": [
                                ""
                            ],
                            "tags": [
                                {
                                    "id": 1,
                                    "name": ""
                                }
                            ],
                            "status": "available"
                        }
                    ]
                },
                "400": {
                    "description": "Invalid status value",
                    "data": {}
                }
            }
        },
        {
            "url": "/pet/findByTags",
            "method": "get",
            "summary": "Finds Pets by tags",
            "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "tags",
                    "in": "query",
                    "description": "Tags to filter by",
                    "required": true,
                    "type": "array"
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "data": [
                        {
                            "id": 1,
                            "category": {
                                "id": 1,
                                "name": ""
                            },
                            "name": "",
                            "photoUrls": [
                                ""
                            ],
                            "tags": [
                                {
                                    "id": 1,
                                    "name": ""
                                }
                            ],
                            "status": "available"
                        }
                    ]
                },
                "400": {
                    "description": "Invalid tag value",
                    "data": {}
                }
            }
        },
        {
            "url": "/pet/{petId}",
            "method": "get",
            "summary": "Find pet by ID",
            "description": "Returns a single pet",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet to return",
                    "required": true,
                    "type": "integer"
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "data": {
                        "id": 1,
                        "category": {
                            "id": 1,
                            "name": ""
                        },
                        "name": "",
                        "photoUrls": [
                            ""
                        ],
                        "tags": [
                            {
                                "id": 1,
                                "name": ""
                            }
                        ],
                        "status": "available"
                    }
                },
                "400": {
                    "description": "Invalid ID supplied",
                    "data": {}
                },
                "404": {
                    "description": "Pet not found",
                    "data": {}
                }
            }
        },
        {
            "url": "/pet/{petId}",
            "method": "post",
            "summary": "Updates a pet in the store with form data",
            "description": "",
            "consumes": [
                "application/x-www-form-urlencoded"
            ],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet that needs to be updated",
                    "required": true,
                    "type": "integer"
                },
                {
                    "name": "name",
                    "in": "formData",
                    "description": "Updated name of the pet",
                    "required": false,
                    "type": "string"
                },
                {
                    "name": "status",
                    "in": "formData",
                    "description": "Updated status of the pet",
                    "required": false,
                    "type": "string"
                }
            ],
            "responses": {
                "405": {
                    "description": "Invalid input",
                    "data": {}
                }
            }
        },
        {
            "url": "/pet/{petId}",
            "method": "delete",
            "summary": "Deletes a pet",
            "description": "",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "api_key",
                    "in": "header",
                    "description": "",
                    "required": false,
                    "type": "string"
                },
                {
                    "name": "petId",
                    "in": "path",
                    "description": "Pet id to delete",
                    "required": true,
                    "type": "integer"
                }
            ],
            "responses": {
                "400": {
                    "description": "Invalid ID supplied",
                    "data": {}
                },
                "404": {
                    "description": "Pet not found",
                    "data": {}
                }
            }
        },
        {
            "url": "/pet/{petId}/uploadImage",
            "method": "post",
            "summary": "uploads an image",
            "description": "",
            "consumes": [
                "multipart/form-data"
            ],
            "produces": [
                "application/json"
            ],
            "parameters": [
                {
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet to update",
                    "required": true,
                    "type": "integer"
                },
                {
                    "name": "additionalMetadata",
                    "in": "formData",
                    "description": "Additional data to pass to server",
                    "required": false,
                    "type": "string"
                },
                {
                    "name": "file",
                    "in": "formData",
                    "description": "file to upload",
                    "required": false,
                    "type": "file"
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "data": {
                        "code": 1,
                        "type": "",
                        "message": ""
                    }
                }
            }
        },
        {
            "url": "/store/inventory",
            "method": "get",
            "summary": "Returns pet inventories by status",
            "description": "Returns a map of status codes to quantities",
            "consumes": [],
            "produces": [
                "application/json"
            ],
            "parameters": [],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "data": {}
                }
            }
        },
        {
            "url": "/store/order",
            "method": "post",
            "summary": "Place an order for a pet",
            "description": "",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "body",
                    "in": "body",
                    "description": "order placed for purchasing the pet",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "data": {
                        "id": 1,
                        "petId": 1,
                        "quantity": 1,
                        "shipDate": "1970-01-01 00:00:00",
                        "status": "placed",
                        "complete": false
                    }
                },
                "400": {
                    "description": "Invalid Order",
                    "data": {}
                }
            }
        },
        {
            "url": "/store/order/{orderId}",
            "method": "get",
            "summary": "Find purchase order by ID",
            "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "orderId",
                    "in": "path",
                    "description": "ID of pet that needs to be fetched",
                    "required": true,
                    "type": "integer"
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "data": {
                        "id": 1,
                        "petId": 1,
                        "quantity": 1,
                        "shipDate": "1970-01-01 00:00:00",
                        "status": "placed",
                        "complete": false
                    }
                },
                "400": {
                    "description": "Invalid ID supplied",
                    "data": {}
                },
                "404": {
                    "description": "Order not found",
                    "data": {}
                }
            }
        },
        {
            "url": "/store/order/{orderId}",
            "method": "delete",
            "summary": "Delete purchase order by ID",
            "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "orderId",
                    "in": "path",
                    "description": "ID of the order that needs to be deleted",
                    "required": true,
                    "type": "integer"
                }
            ],
            "responses": {
                "400": {
                    "description": "Invalid ID supplied",
                    "data": {}
                },
                "404": {
                    "description": "Order not found",
                    "data": {}
                }
            }
        },
        {
            "url": "/user",
            "method": "post",
            "summary": "Create user",
            "description": "This can only be done by the logged in user.",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "body",
                    "in": "body",
                    "description": "Created user object",
                    "required": true
                }
            ],
            "responses": {
                "default": {
                    "description": "successful operation",
                    "data": {}
                }
            }
        },
        {
            "url": "/user/createWithArray",
            "method": "post",
            "summary": "Creates list of users with given input array",
            "description": "",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "body",
                    "in": "body",
                    "description": "List of user object",
                    "required": true
                }
            ],
            "responses": {
                "default": {
                    "description": "successful operation",
                    "data": {}
                }
            }
        },
        {
            "url": "/user/createWithList",
            "method": "post",
            "summary": "Creates list of users with given input array",
            "description": "",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "body",
                    "in": "body",
                    "description": "List of user object",
                    "required": true
                }
            ],
            "responses": {
                "default": {
                    "description": "successful operation",
                    "data": {}
                }
            }
        },
        {
            "url": "/user/login",
            "method": "get",
            "summary": "Logs user into the system",
            "description": "",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "username",
                    "in": "query",
                    "description": "The user name for login",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "password",
                    "in": "query",
                    "description": "The password for login in clear text",
                    "required": true,
                    "type": "string"
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "data": ""
                },
                "400": {
                    "description": "Invalid username/password supplied",
                    "data": {}
                }
            }
        },
        {
            "url": "/user/logout",
            "method": "get",
            "summary": "Logs out current logged in user session",
            "description": "",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [],
            "responses": {
                "default": {
                    "description": "successful operation",
                    "data": {}
                }
            }
        },
        {
            "url": "/user/{username}",
            "method": "get",
            "summary": "Get user by user name",
            "description": "",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "username",
                    "in": "path",
                    "description": "The name that needs to be fetched. Use user1 for testing. ",
                    "required": true,
                    "type": "string"
                }
            ],
            "responses": {
                "200": {
                    "description": "successful operation",
                    "data": {
                        "id": 1,
                        "username": "",
                        "firstName": "",
                        "lastName": "",
                        "email": "",
                        "password": "",
                        "phone": "",
                        "userStatus": 1
                    }
                },
                "400": {
                    "description": "Invalid username supplied",
                    "data": {}
                },
                "404": {
                    "description": "User not found",
                    "data": {}
                }
            }
        },
        {
            "url": "/user/{username}",
            "method": "put",
            "summary": "Updated user",
            "description": "This can only be done by the logged in user.",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "username",
                    "in": "path",
                    "description": "name that need to be updated",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "body",
                    "in": "body",
                    "description": "Updated user object",
                    "required": true
                }
            ],
            "responses": {
                "400": {
                    "description": "Invalid user supplied",
                    "data": {}
                },
                "404": {
                    "description": "User not found",
                    "data": {}
                }
            }
        },
        {
            "url": "/user/{username}",
            "method": "delete",
            "summary": "Delete user",
            "description": "This can only be done by the logged in user.",
            "consumes": [],
            "produces": [
                "application/xml",
                "application/json"
            ],
            "parameters": [
                {
                    "name": "username",
                    "in": "path",
                    "description": "The name that needs to be deleted",
                    "required": true,
                    "type": "string"
                }
            ],
            "responses": {
                "400": {
                    "description": "Invalid username supplied",
                    "data": {}
                },
                "404": {
                    "description": "User not found",
                    "data": {}
                }
            }
        }
    ]
}